diff --git a/testcases/kernel/syscalls/umount/umount01.c b/testcases/kernel/syscalls/umount/umount01.c
index fb5384434..d04b419b7 100644
--- a/testcases/kernel/syscalls/umount/umount01.c
+++ b/testcases/kernel/syscalls/umount/umount01.c
@@ -6,43 +6,51 @@
  * Phase I test for the umount(2) system call.
  * It is intended to provide a limited exposure of the system call.
  */
-
+/* Patching for lkl to use root file system as default LKL memory
+ * is set to 32MB.
+ */
 #include <errno.h>
 #include <sys/mount.h>
 #include "tst_test.h"
 
 #define MNTPOINT	"mntpoint"
 
-static int mount_flag;
+static int mount_flag = 0;
 
 static void verify_umount(void)
 {
-	if (mount_flag != 1) {
-		SAFE_MOUNT(tst_device->dev, MNTPOINT,
-			tst_device->fs_type, 0, NULL);
-		mount_flag = 1;
-	}
-
 	TEST(umount(MNTPOINT));
 
 	if (TST_RET != 0 && TST_ERR == EBUSY) {
-		tst_res(TINFO, "umount() Failed with EBUSY "
+		tst_res(TINFO, "umount() TEST_FAILED with EBUSY "
 			"possibly some daemon (gvfsd-trash) "
 			"is probing newly mounted dirs");
 	}
 
 	if (TST_RET != 0) {
-		tst_res(TFAIL | TTERRNO, "umount() Failed");
+		tst_res(TFAIL | TTERRNO, "umount() TEST_FAILED");
 		return;
 	}
 
-	tst_res(TPASS, "umount() Passed");
+	tst_res(TPASS, "umount() PASSED ");
 	mount_flag = 0;
 }
 
 static void setup(void)
 {
 	SAFE_MKDIR(MNTPOINT, 0775);
+
+	const char* src  = "/dev/vda";
+	const char* type = "ext4";
+	const unsigned long mntflags = 0;
+	const char* opts = "mode=0777";   
+	int result = mount(src, MNTPOINT, type, mntflags, opts);
+
+	if (result != 0) {
+		TST_RET = result;
+		tst_res(TFAIL, "umount()- setup TEST_FAILED");
+		return;
+	}
 }
 
 static void cleanup(void)
@@ -53,8 +61,8 @@ static void cleanup(void)
 
 static struct tst_test test = {
 	.needs_root = 1,
-	.needs_tmpdir = 1,
-	.format_device = 1,
+	.needs_tmpdir = 0,
+	.format_device = 0,
 	.setup = setup,
 	.cleanup = cleanup,
 	.test_all = verify_umount,
