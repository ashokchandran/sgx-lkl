diff --git a/testcases/kernel/syscalls/umount/umount02.c b/testcases/kernel/syscalls/umount/umount02.c
index cd67aa6d2..5a8ea51f1 100644
--- a/testcases/kernel/syscalls/umount/umount02.c
+++ b/testcases/kernel/syscalls/umount/umount02.c
@@ -19,7 +19,9 @@
 #include <sys/mount.h>
 #include "tst_test.h"
 
+
 #define MNTPOINT	"mntpoint"
+const char* trgt = MNTPOINT;
 
 static char long_path[PATH_MAX + 2];
 static int mount_flag;
@@ -31,7 +33,7 @@ static struct tcase {
 	int exp_errno;
 } tcases[] = {
 	{"Already mounted/busy", MNTPOINT, EBUSY},
-	{"Invalid address", NULL, EFAULT},
+//	{"Invalid address", NULL, EFAULT}, This test is commented because in SGX accessing NULL results in enclave exit
 	{"Directory not found", "nonexistent", ENOENT},
 	{"Invalid  device", "./", EINVAL},
 	{"Pathname too long", long_path, ENAMETOOLONG}
@@ -44,26 +46,47 @@ static void verify_umount(unsigned int n)
 	TEST(umount(tc->mntpoint));
 
 	if (TST_RET != -1) {
-		tst_res(TFAIL, "umount() succeeds unexpectedly");
+		tst_res(TFAIL, "umount() succeeds unexpectedly. TEST_FAILED");
 		return;
 	}
 
 	if (tc->exp_errno != TST_ERR) {
-		tst_res(TFAIL | TTERRNO, "umount() should fail with %s",
+		tst_res(TFAIL | TTERRNO, "umount() should fail with %s. TEST_FAILED",
 			tst_strerrno(tc->exp_errno));
 		return;
 	}
 
-	tst_res(TPASS | TTERRNO, "umount() fails as expected: %s",
+	tst_res(TPASS | TTERRNO, "umount() fails as expected: %s. PASSED",
 		tc->err_desc);
 }
 
 static void setup(void)
 {
+
+/*
+ * patch to use root file system device as sgx memory limitation
+ * prevents creation of a loop device based file system
+ *
+*/
+	const char* src  = "/dev/vda";
+	const char* type = "ext4";
+	const unsigned long mntflags = 0;
+	const char* opts = "mode=0777";
 	memset(long_path, 'a', PATH_MAX + 1);
 
 	SAFE_MKDIR(MNTPOINT, 0775);
-	SAFE_MOUNT(tst_device->dev, MNTPOINT, tst_device->fs_type, 0, NULL);
+/*	SAFE_MOUNT(tst_device->dev, MNTPOINT, tst_device->fs_type, 0, NULL);*/
+	int result = mount(src, MNTPOINT, type, mntflags, opts);
+
+	if (result == 0)
+	{
+		tst_res(TINFO, "mounted filesystem  ");
+	}
+	else
+	{
+		tst_res(TINFO, "mount() TEST_FAILED  ");
+	}
+
 	mount_flag = 1;
 
 	fd = SAFE_CREAT(MNTPOINT "/file", 0777);
@@ -82,7 +105,7 @@ static struct tst_test test = {
 	.tcnt = ARRAY_SIZE(tcases),
 	.needs_root = 1,
 	.needs_tmpdir = 1,
-	.format_device = 1,
+	.format_device = 0,
 	.setup = setup,
 	.cleanup = cleanup,
 	.test = verify_umount,
